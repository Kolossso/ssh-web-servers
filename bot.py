import logging
import paramiko
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, MenuButtonCommands

TOKEN = "7056307221:AAG3hT2Vyn5AXaMTWrqr0JvaxXHks_4KkVk"
SSH_HOST = "34.88.223.194"
SSH_PORT = 22
SSH_USER = "zokirjonovjavohir61"
SSH_KEY_PATH = "id_rsa"
AUTHORIZED_USERS = [1395804259]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–æ—Å—Ç–∞–ª–æ—Å—å –≤–Ω–∏–∑—É)
menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="run_server")],
    [InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="stop_server")],
    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="update_server")]
])

async def set_bot_commands():
    commands = [
        types.BotCommand(command="start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand(command="run", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"),
        types.BotCommand(command="stop", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"),
        types.BotCommand(command="update", description="–û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
    ]
    await bot.set_my_commands(commands)
    await bot.set_chat_menu_button(menu_button=MenuButtonCommands())

def execute_ssh_command(command, async_mode=False):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ SSH.
    –ï—Å–ª–∏ `async_mode=True`, –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –±–æ—Ç–∞).
    """
    try:
        key = paramiko.RSAKey.from_private_key_file(SSH_KEY_PATH)
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(SSH_HOST, port=SSH_PORT, username=SSH_USER, pkey=key)

        if async_mode:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
            command = f"nohup {command} > /dev/null 2>&1 &"

        stdin, stdout, stderr = client.exec_command(command)
        output = stdout.read().decode()
        error = stderr.read().decode()
        client.close()

        logging.info(f"–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {command}\n–í—ã–≤–æ–¥: {output}\n–û—à–∏–±–∫–∞: {error}")
        return output if output else error
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ SSH: {e}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

@dp.message()
async def start(message: types.Message):
    if message.from_user.id not in AUTHORIZED_USERS:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º.")
        return
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –£–ø—Ä–∞–≤–ª—è–π —Å–µ—Ä–≤–µ—Ä–æ–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫:", reply_markup=menu_keyboard)

@dp.callback_query(lambda c: c.data == "run_server")
async def run_server(callback: types.CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä CS2...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(start_cs2_server())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connect_text = f"üéÆ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:\n```connect {SSH_HOST}:27015```"

    await callback.message.answer(
        f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!\n\n{connect_text}\n\n"
        "–°–∫–æ–ø–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—É –∏ –≤—Å—Ç–∞–≤—å –≤ –∫–æ–Ω—Å–æ–ª—å CS2.",
        parse_mode="Markdown",
        reply_markup=menu_keyboard
    )

async def start_cs2_server():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä CS2 –≤ —Ñ–æ–Ω–µ —á–µ—Ä–µ–∑ screen.
    """
    command = (
        "screen -dmS cs2_server bash -c '"
        "cd /home/zokirjonovjavohir61/.steam/steam/steamapps/common/Counter-Strike\\ Global\\ Offensive/game/bin/linuxsteamrt64/ && "
        "chmod +x start.sh && ./start.sh > cs2_log.txt 2>&1'"
    )
    output = execute_ssh_command(command)
    logging.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞: {output}")


@dp.callback_query(lambda c: c.data == "stop_server")
async def stop_server(callback: types.CallbackQuery):
    execute_ssh_command("pkill -f cs2")
    await callback.message.edit_text("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=menu_keyboard)

@dp.callback_query(lambda c: c.data == "update_server")
async def update_server(callback: types.CallbackQuery):
    execute_ssh_command("steamcmd +login anonymous +app_update 730 +quit")
    await callback.message.edit_text("‚úÖ –°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞.", reply_markup=menu_keyboard)

async def on_startup():
    await set_bot_commands()

async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
