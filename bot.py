import logging
import paramiko
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, MenuButtonCommands
from aiogram.filters import Command

# üîê –î–ê–ù–ù–´–ï –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
TOKEN = "7056307221:AAG3hT2Vyn5AXaMTWrqr0JvaxXHks_4KkVk"
SSH_HOST = "34.88.223.194"
SSH_PORT = 22
SSH_USER = "zokirjonovjavohir61"
SSH_KEY_PATH = "id_rsa"
AUTHORIZED_USERS = [1395804259]

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher()

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="run_server")],
    [InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="stop_server")],
    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="update_server")],
    [InlineKeyboardButton(text="üì° –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", callback_data="server_status")],
])

async def set_bot_commands():
    commands = [
        types.BotCommand(command="start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand(command="run", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"),
        types.BotCommand(command="stop", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"),
        types.BotCommand(command="update", description="–û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"),
        types.BotCommand(command="status", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"),
        types.BotCommand(command="cmd", description="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ö–°2")
    ]
    await bot.set_my_commands(commands)
    await bot.set_chat_menu_button(menu_button=MenuButtonCommands())

def execute_ssh_command(command):
    """ –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ SSH """
    try:
        key = paramiko.RSAKey.from_private_key_file(SSH_KEY_PATH)
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(SSH_HOST, port=SSH_PORT, username=SSH_USER, pkey=key)

        stdin, stdout, stderr = client.exec_command(command)
        output = stdout.read().decode().strip()
        error = stderr.read().decode().strip()
        client.close()

        logging.info(f"–ö–æ–º–∞–Ω–¥–∞: {command}\n–í—ã–≤–æ–¥: {output}\n–û—à–∏–±–∫–∞: {error}")
        return output if output else error
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ SSH: {e}")
        return f"–û—à–∏–±–∫–∞: {str(e)}"

@dp.message(Command("start"))
async def start(message: types.Message):
    if message.from_user.id not in AUTHORIZED_USERS:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º.")
        return
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –£–ø—Ä–∞–≤–ª—è–π —Å–µ—Ä–≤–µ—Ä–æ–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫:", reply_markup=menu_keyboard)

@dp.callback_query(lambda c: c.data == "run_server")
async def run_server(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()

    asyncio.create_task(start_cs2_server())

    connect_text = f"üéÆ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:\n```connect {SSH_HOST}:27015```"
    await callback.message.answer(
        f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!\n\n{connect_text}\n\n"
        "–°–∫–æ–ø–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—É –∏ –≤—Å—Ç–∞–≤—å –≤ –∫–æ–Ω—Å–æ–ª—å CS2.",
        parse_mode="Markdown",
        reply_markup=menu_keyboard
    )

async def start_cs2_server():
    """ –ó–∞–ø—É—Å–∫–∞–µ—Ç CS2 —Å–µ—Ä–≤–µ—Ä –≤ screen cs2_console """
    command = (
        "screen -dmS cs2_console bash -c '"
        "cd /home/zokirjonovjavohir61/.steam/steam/steamapps/common/Counter-Strike\\ Global\\ Offensive/game/bin/linuxsteamrt64/ && "
        "chmod +x start.sh && ./start.sh > cs2_log.txt 2>&1'"
    )
    execute_ssh_command(command)

@dp.callback_query(lambda c: c.data == "stop_server")
async def stop_server(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()
    
    execute_ssh_command("screen -S cs2_console -X quit")
    await callback.message.answer("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=menu_keyboard)

@dp.callback_query(lambda c: c.data == "update_server")
async def update_server(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()
    
    execute_ssh_command("steamcmd +login anonymous +app_update 730 +quit")
    await callback.message.answer("‚úÖ –°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞.", reply_markup=menu_keyboard)

@dp.callback_query(lambda c: c.data == "server_status")
async def server_status(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()
    
    output = execute_ssh_command("screen -ls | grep cs2_console")

    if "cs2_console" in output:
        connect_text = f"üéÆ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É:\n```connect {SSH_HOST}:27015```"
        status_text = f"‚úÖ –°–µ—Ä–≤–µ—Ä **–∑–∞–ø—É—â–µ–Ω**!\n\n{connect_text}\n\n–°–∫–æ–ø–∏—Ä—É–π –∫–æ–º–∞–Ω–¥—É –∏ –≤—Å—Ç–∞–≤—å –≤ –∫–æ–Ω—Å–æ–ª—å CS2."
    else:
        status_text = "‚ùå –°–µ—Ä–≤–µ—Ä **–≤—ã–∫–ª—é—á–µ–Ω**!"

    await callback.message.answer(status_text, parse_mode="Markdown", reply_markup=menu_keyboard)

@dp.message(lambda m: m.text.startswith("/cmd"))
async def send_server_command(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ–Ω—Å–æ–ª—å CS2-—Å–µ—Ä–≤–µ—Ä–∞."""
    if message.from_user.id not in AUTHORIZED_USERS:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    command = message.text[len("/cmd "):].strip()
    if not command:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ `/cmd`.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ screen —Å–µ—Å—Å–∏—é
    result = execute_ssh_command(f"screen -S cs2_console -X stuff '{command}\n'")
    
    if "No screen session found" in result:
        await message.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–º–∞–Ω–¥.")
    else:
        await message.answer(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ `{command}` –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")

async def on_startup():
    await set_bot_commands()

async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())